<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.3//EN" "http://www.web3d.org/specifications/x3d-3.3.dtd">
<X3D profile='Interactive' version='3.3' xmlns:xsd='http://www.w3.org/2001/XMLSchema-instance' xsd:noNamespaceSchemaLocation='http://www.web3d.org/specifications/x3d-3.3.xsd'>
  <head>
    <meta content='Icosahedron-tessellate-with-keyboard-script-bindings.x3d' name='title'/>
    <meta content='Icosahedron shape composed using IndexedTriangleSet or IndexedFaceSet node with tesselation shader and parameter adjustment for X3D spec consideration' name='description'/>
    <meta content='Gerallt Franke' name='creator'/>
    <meta content='18 June 2016' name='created'/>
	<meta content='23 July 2016' name='modified'/>
    <meta content='Recommended browser for viewing is x3d-finely-sharpened' name='X3DBrowser'/>
    <meta content='GPLv3' name='License'/>
	
	<Script>
	<![CDATA[

		// All scripts within head, or not under header are compiled and executed once
		// The onRenderFrame() function definition is executed multiple times - every frame
		
		var frameId = 0;
		var tessLevelInner = 3;
		var tessLevelOuter = 2; 
		
		var shaderTess01 = document.getElementById('shaderTess01');
		
		document.onkeydown = updateTessLevels; // TWO different ways to bind to the keyboard

		function updateTessLevels(e) 
		{
			var event = window.event ? window.event : e;
			
			if (event.keyCode == '38') { // up arrow
				//tessLevelOuter++;
			}
			else if (event.keyCode == '40') { // down arrow
				//tessLevelOuter = tessLevelOuter > 1 ? tessLevelOuter - 1 : 1;
			}
			else if (event.keyCode == '37') { // left arrow
			   //tessLevelInner = tessLevelInner > 1 ? tessLevelInner - 1 : 1;
			}
			else if (event.keyCode == '39') { // right arrow
			   //tessLevelInner++;
			}
		
			//console.log('~~~ Tessellation Settings ~~~');
			//console.log('Inner: ' + tessLevelInner);
			//console.log('Outer: ' + tessLevelOuter);
			
		}
		
	]]>
	</Script>
  </head>
  <Scene>
	<NavigationInfo type='"EXAMINE"'/>
	<Viewpoint description='Icosahedron View' position='0 0 -3.80003'/>
	
	<Script>
	<![CDATA[

		function update(){
			console.log('~~~ Tessellation Settings ~~~');
			console.log('Inner: ' + tessLevelInner);
			console.log('Outer: ' + tessLevelOuter);
			
			// Update tessellation uniform variables
			shaderTess01.setFieldValue('TessLevelInner', tessLevelInner);
			shaderTess01.setFieldValue('TessLevelOuter', tessLevelOuter);
		}
		
		
		function onRenderFrame(e) // This script is executed every frame
		{
			if(Keyboard[Key.Left]) // efficient Keyboard map to manage key state
			{
				tessLevelInner = tessLevelInner > 1 ? tessLevelInner - 1 : 1;
				update();
			}
			if(Keyboard[Key.Right])
			{
				tessLevelInner++;
				update();
			}
			if(Keyboard[Key.Up])
			{
				tessLevelOuter++;
				update();
			}
			if(Keyboard[Key.Down])
			{
				tessLevelOuter = tessLevelOuter > 1 ? tessLevelOuter - 1 : 1;
				update();
			}
		
		
			console.log('frame ' + frameId + ' time ' + e.time);
			frameId++;
		}

	]]>
	</Script>
		
    <Shape>
		
		
		<IndexedTriangleSet solid="false" index="2 1 0  3 2 0  4 3 0  5 4 0  1 5 0  11 6 7  11 7 8  11 8 9  11 9 10  11 10 6  1 2 6  2 3 7  3 4 8  4 5 9  5 1 10  2  7 6  3  8 7  4  9 8  5 10 9  1 6 10  " 
						>
			<Coordinate point="0.000 0.000 1.000, 0.894 0.000 0.447, 0.276 0.851 0.447, -0.724 0.526 0.447, -0.724 -0.526 0.447, 0.276 -0.851 0.447, 0.724 0.526 -0.447, -0.276 0.851 -0.447, -0.894 0.000 -0.447, -0.276 -0.851 -0.447, 0.724 -0.526 -0.447, 0.000 0.000 -1.000 " />
		</IndexedTriangleSet>
		<!-- Another way to represent the same geometry
		<IndexedFaceSet solid="false" coordIndex="2 1 0 -1 3 2 0 -1 4 3 0 -1 5 4 0 -1 1 5 0 -1 11 6 7 -1 11 7 8 -1 11 8 9 -1 11 9 10 -1 11 10 6 -1 1 2 6 -1 2 3 7 -1 3 4 8 -1 4 5 9 -1 5 1 10 -1 2  7 6 -1 3  8 7 -1 4  9 8 -1 5 10 9 -1 1 6 10 -1 " 
						>
			<Coordinate point="0.000 0.000 1.000, 0.894 0.000 0.447, 0.276 0.851 0.447, -0.724 0.526 0.447, -0.724 -0.526 0.447, 0.276 -0.851 0.447, 0.724 0.526 -0.447, -0.276 0.851 -0.447, -0.894 0.000 -0.447, -0.276 -0.851 -0.447, 0.724 -0.526 -0.447, 0.000 0.000 -1.000 " />
		</IndexedFaceSet>-->
		
		<Appearance> 

			<ImageTexture url='"spectrum.jpg" "https://github.com/RealityDaemon/x3d-finely-sharpened/raw/master/x3d-examples/Scripting/spectrum.jpg"'/>
			
			<ComposedShader id="shaderTess01" language='GLSL'>
				<field accessType='inputOnly' name='TessLevelInner' type='SFFloat' value="3" /> 
				<field accessType='inputOnly' name='TessLevelOuter' type='SFFloat' value="2" />
				
				
				<ShaderPart type='VERTEX'><![CDATA[
#version 420 core
layout(location = 0) in vec3 position;
layout(location = 1) in vec3 normal;
layout(location = 2) in vec4 color;
layout(location = 3) in vec2 texcoord;

uniform mat4 modelview;
uniform mat4 projection;
uniform float camscale;
uniform vec3 size;
uniform vec3 scale;
uniform vec3 X3DScale;
uniform int coloringEnabled;
uniform int texturingEnabled;

varying vec3 lightVec;
varying vec3 eyeVec;
varying vec3 normalVec;

out vec4 vColor;
out lowp vec2 uv;
out vec3 vPosition;
out vec3 N;

void main()
{
	mat4 model = projection * modelview;

	vPosition = X3DScale * camscale * scale * size * position;
	gl_Position = model * vec4(vPosition, 1.0);
	vColor = color;

	//gl_TexCoord[0] = gl_MultiTexCoord0; 
	normalVec = normalize(normal); // gl_Normal
	N = normalize(gl_NormalMatrix * gl_Normal);

	vec4 eyePos = gl_ModelViewMatrixInverse * vec4(0., 0., 0., 1.);
	eyeVec = normalize(eyePos.xyz - position.xyz);

	vec4 lightPos = modelview * vec4(1.0, 0.0, 0.0, 1.0); // gl_ModelViewMatrixInverse  gl_LightSource[0].position.xyz
	lightVec = normalize(lightPos.xyz - position.xyz);

	uv = texcoord;
}
]]> 
</ShaderPart>
					  
				<ShaderPart type='TESS_CONTROL'><![CDATA[	
#version 420 core 
layout(vertices = 3) out; 
in vec3 vPosition[]; 
out vec3 tcPosition[]; 
uniform float TessLevelInner; 
uniform float TessLevelOuter; 
#define ID gl_InvocationID 
void main() 
{ 
    tcPosition[ID] = vPosition[ID];
    if (ID == 0) {
        gl_TessLevelInner[0] = TessLevelInner; 
        gl_TessLevelOuter[0] = TessLevelOuter; 
        gl_TessLevelOuter[1] = TessLevelOuter; 
        gl_TessLevelOuter[2] = TessLevelOuter; 
    } 
}
]]> 
</ShaderPart>
				<ShaderPart type='TESS_EVAL'><![CDATA[	
#version 420 core 
layout(triangles, equal_spacing, cw) in; 
in vec3 tcPosition[]; 
out vec3 tePosition; 
out vec3 tePatchDistance; 
uniform mat4 projection; 
uniform mat4 modelview; 
uniform vec3 scale; 
uniform float camscale; 
uniform vec3 size; 
uniform vec3 X3DScale; 
void main() 
{ 
    vec3 p0 = gl_TessCoord.x * tcPosition[0]; 
    vec3 p1 = gl_TessCoord.y * tcPosition[1]; 
    vec3 p2 = gl_TessCoord.z * tcPosition[2]; 
    tePatchDistance = gl_TessCoord; 
    tePosition = X3DScale * camscale * scale * size * normalize(p0 + p1 + p2); 
    gl_Position = projection * modelview * vec4(tePosition, 1); 
}
]]> 
</ShaderPart>
				<ShaderPart type='GEOMETRY'><![CDATA[
#version 420 core 
uniform mat4 modelview; 
uniform mat3 normalmatrix; 
layout(triangles) in; 
layout(triangle_strip, max_vertices = 3) out; 
in vec3 tePosition[3]; 
in vec3 tePatchDistance[3]; 
out vec3 gFacetNormal; 
out vec3 gPatchDistance; 
out vec3 gTriDistance; 
out vec2 gFacetTexCoord; 
#define M_PI 3.1415926535897932384626433832795 
void main() 
{ 
    vec3 A = tePosition[2] - tePosition[0]; 
    vec3 B = tePosition[1] - tePosition[0]; 
    gFacetNormal = normalmatrix  * normalize(cross(A, B)); 
    gFacetTexCoord = vec2(asin(gFacetNormal.x)/M_PI + 0.5 , asin(gFacetNormal.y) / M_PI + 0.5 ); // Sphere TexCoord 
    gPatchDistance = tePatchDistance[0]; 
    gTriDistance = vec3(1, 0, 0); 
    gl_Position = gl_in[0].gl_Position; 
    EmitVertex(); 
    gPatchDistance = tePatchDistance[1]; 
    gTriDistance = vec3(0, 1, 0); 
    gl_Position = gl_in[1].gl_Position; 
    EmitVertex(); 
    gPatchDistance = tePatchDistance[2]; 
    gTriDistance = vec3(0, 0, 1); 
    gl_Position = gl_in[2].gl_Position; 
    EmitVertex(); 
    EndPrimitive(); 
} 
]]> 
</ShaderPart>
				<ShaderPart type='FRAGMENT'><![CDATA[
#version 420

varying vec3 lightVec;
varying vec3 eyeVec;
varying vec3 normalVec;

in vec3 gFacetNormal;
in vec3 gTriDistance;
in vec3 gPatchDistance;
in float gPrimitive;
in vec2 gFacetTexCoord;

in vec2 uv;
in vec4 vColor;
in vec3 N;
in vec3 vPosition;
in vec4 worldPos;
in vec4 camera;
out vec4 FragColor;

uniform sampler2D _MainTex;
uniform vec3 specular = vec3(.7, .7, .7);
uniform float ambient = 0.2;

uniform vec3 LightPosition;
uniform vec3 DiffuseMaterial;
uniform vec3 AmbientMaterial;
uniform int coloringEnabled;
uniform int texturingEnabled;
uniform int lightingEnabled;

uniform int materialsEnabled;
uniform int materialsCount;

struct X3DMaterial
{
	vec4 diffuseColor;
	vec4 emissiveColor; // emissive colors are visible even if no light sources are directed at the surface
	vec4 specularColor;
	float ambientIntensity; // specifies how much ambient light this surface shall reflect
	float shininess;
	float transparency;
};

const int MATERIALS_LIMIT = 10; // finely-sharpened imposes a limit of 10 materials per object

layout(std140, binding = 0) uniform X3DMaterialBlock
{
	X3DMaterial materials[MATERIALS_LIMIT];
};

vec3 ads(){
	vec3 Ka = vec3(0.0, 0.0, 0.0);
	vec3 Kd = vec3(0.0, 0.0, 0.0);
	vec3 Ks = vec3(0.9, 0.9, 0.9);

	vec3 v = normalize(-vPosition);
	vec3 lightIntensity = vec3(0.9, 0.9, 0.9);
	vec3 lightPosition = vec3(100, 100, 100);
	vec3 n = normalize(N);
	vec3 s = normalize(lightPosition - vPosition);
	
	vec3 h = normalize(v + s);
	float Shininess = 40.00001;

	return lightIntensity *
		(Ka +
			Kd * max(dot(s, n), 0.0) +
			Ks * pow(max(dot(h, n), 0.0), Shininess));
}

vec3 spotlight() {
	vec3 Ka = vec3(0.0, 0.0, 0.0);
	vec3 Kd = vec3(0.0, 0.8, 0.0);
	vec3 Ks = vec3(0.9, 0.9, 0.9);

	vec3 spot_intensity = vec3(0.9, 0.9, 0.9);
	vec3 spot_direction = vec3(0,1,0);
	vec3 spot_position = vec3(10, 10, 10);
	float spot_cutoff = 89;
	float Shininess = 0.01001;
	float spot_exponent = 2.9001;

	vec3 s = normalize(spot_position - vPosition);
	float angle = acos( dot(-s, spot_direction) );
	float cutoff = radians( clamp (spot_cutoff, 0.0, 90.0) );
	vec3 ambient = spot_intensity * Ka;

	if (angle < cutoff) {
		float spotFactor = pow(dot(-s, spot_direction),
			spot_exponent);

		vec3 v = normalize(vec3(-vPosition));
		vec3 h = normalize(v + s);

		return ambient +
			spotFactor * spot_intensity * (

				Kd * max(dot(s, N), 0.0) +
				Ks * pow(max(dot(h, N), 0.0), Shininess)
				);
	}
	else {
		return ambient;
	}
}

vec4 applyMaterials()
{
	X3DMaterial material;
	vec4 blended;
	vec3 Light0;
	vec3 R;
	vec4 Iamb;
	vec4 Idiff;
	vec4 Ispec;
	vec3 E;
	vec4 ambientColor;

	float lightAttenuationMax;
	float lightAttenuationMin;
	float d;
	float attenuation;
	float Light_Cone_Min;
	float Light_Cone_Max;
	float LdotS;
	float CosI;
	vec4 Light_Intensity;

	//float depth = (length(camera.xyz - vPosition) - 1.0) / 10.0;

	d = 0.;
	Light_Cone_Min = 3.14 / 6.0;
	Light_Cone_Max = 3.14 / 4.0;
	lightAttenuationMax = 1.0;
	lightAttenuationMin = 0.0;
	Light_Intensity = vec4(0.1, 0.1, 0.1, 1.0);
	blended = vec4(0, 0, 0, 0);


	for (int i = 0; i < materialsCount; i++)
	{
		material = materials[i];

		ambientColor = material.diffuseColor * material.ambientIntensity;
		
		E = normalize(-vPosition); // we are in Eye Coordinates, so EyePos is (0,0,0) 
								   //Light0 = normalize(gl_LightSource[i].position.xyz - vPosition);
		
		Light0 = normalize(-eyeVec.xyz);

		R = normalize(-reflect(Light0, N));

		Iamb = ambientColor;

		//Idiff = material.diffuseColor * max(dot(N, Light0), 0.0);
		Idiff = material.diffuseColor;
		Idiff = clamp(Idiff, 0.0, 1.0);

		//Ispec = material.specularColor * pow(max(dot(R, E), 0.0), 0.3 * material.shininess);
		Ispec = material.specularColor;
		Ispec = clamp(Ispec, 0.0, 1.0);






		// Hermite interpolation for smooth variations of light level

		//attenuation = smoothstep(lightAttenuationMax, lightAttenuationMin, d);

		// Adjust attenuation based on light cone.

		//vec3 S = normalize(Light0);

		//vec3 L = normalize(Light0);
		//vec3 E = normalize(attrib_Fragment_Eye);
		//vec3 H = normalize(L + E);



		//LdotS = dot(-L, S);
		//CosI = Light_Cone_Min - Light_Cone_Max;

		//attenuation *= clamp((LdotS - Light_Cone_Max) / CosI, 0.0, 1.0);


		//blended += (Iamb + Idiff + Ispec) * Light_Intensity;
		blended += (Iamb + Idiff + Ispec);


		//blended += (Iamb + Idiff + Ispec) * depth;
		//blended += (Iamb + Idiff + Ispec) * Light_Intensity * attenuation;
		//blended += Idiff;
		//blended.w += material.transparency;

		blended.w = material.transparency;
		//blended.w = 1.0;


		//float depth = (length(camera.xyz - vPosition) - 1.0) / 49.0;
		//blended = vec4(depth, depth, depth, 1.0);


		//blended = material.diffuseColor;

		//blended = mix(blended, material.diffuseColor, 0.5);
		//blended = blended + material.diffuseColor / 2;
	}

	//blended = vec4(0.69803923, 0.5176471, 0.03137255, 1.0);

	//return materials[0].test2;

	//return vec4(X3DMaterial.test, 1.0);
	//return vec4(materials[0].diffuseColor, 1.0);
	//return vec4(1, 0, 0, 1.0);

	return blended;
}

float amplify(float d, float scale, float offset)
{
	d = scale * d + offset;
	d = clamp(d, 0, 1);
	d = 1 - exp2(-2 * d*d);
	return d;
}

void main()
{

	vec4 texture_color;
	vec4 material_color;
	vec4 col_accum;

	texture_color = vec4(0, 0, 0, 1);

	// TEXTURING
	if (texturingEnabled == 1)
	{
		if (length(gFacetTexCoord) != 0)
		{
			texture_color = texture2D(_MainTex, gFacetTexCoord);
		}
		else
		{
			texture_color = texture2D(_MainTex, uv);
		}
	}

	col_accum = texture_color;

	// TESSELLATION edge collorings
	vec3 Nf = normalize(gFacetNormal);
	vec3 L = vec3(0.25, 0.25, 1.00);
	float df = abs(dot(Nf, L));
	vec3 color = (df * col_accum.xyz);

	float d1 = min(min(gTriDistance.x, gTriDistance.y), gTriDistance.z);
	float d2 = min(min(gPatchDistance.x, gPatchDistance.y), gPatchDistance.z);
	color = amplify(d1, 40, -0.5) * amplify(d2, 60, -0.5) * color;
	col_accum = col_accum + vec4(color, 1.0) / 2;

	// COLORING
	if (coloringEnabled == 1)
	{
		col_accum = vColor + col_accum / 2;
	}


	vec4 finalColor = vec4(0.0, 0.0, 0.0, 0.0);

	// MATERIALS
	if (materialsEnabled == 1)
	{
		// MaterialFragmentShader.shader should be linked in so we can use the functions it provides.


		material_color = applyMaterials();

		col_accum = col_accum + material_color / 2;

		//col_accum = material_color;
	}
	else {
		//col_accum = vec4(1, 0, 0, 1);
	}

	vec4 Ads1 = vec4(ads(), 1.0);

	if (lightingEnabled == 1) 
	{
		//col_accum = col_accum + Ads1 / 2;
	}
	



	//col_accum = col_accum + vec4(spotlight(), 1.0) / 2;

	//col_accum = Ads1;

	//col_accum = vec4(1, 0, 0, 1);

	FragColor = col_accum;

}
]]> 
</ShaderPart>
			</ComposedShader>
		</Appearance>
    </Shape>
  </Scene>
</X3D>