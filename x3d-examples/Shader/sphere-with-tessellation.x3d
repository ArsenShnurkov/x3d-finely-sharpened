<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.3//EN" "http://www.web3d.org/specifications/x3d-3.3.dtd">
<X3D profile='Interchange' version='3.3' xmlns:xsd='http://www.w3.org/2001/XMLSchema-instance' xsd:noNamespaceSchemaLocation='http://www.web3d.org/specifications/x3d-3.3.xsd'>
  <head>
    <meta content='Sphere.x3d' name='title'/>
    <meta content='Sphere geometric primitive node with tesselation shader for X3D spec consideration' name='description'/>
    <meta content='Gerallt Franke' name='creator'/>
    <meta content='10 June 2016' name='created'/>
  </head>
  <Scene>
    <Shape>
		<Sphere />
		<Appearance>
			<Material diffuseColor='0 1.0 1.0' />
			<ImageTexture url='"spectrum.jpg"'/>
			
			<ComposedShader language='GLSL'>
				<field accessType='inputOnly' name='TessLevelInner' type='SFFloat' value="3"/>
				<field accessType='inputOnly' name='TessLevelOuter' type='SFFloat' value="2" />
				
				
				<ShaderPart type='VERTEX' url='data:text/plain
#version 420 core 
layout(location = 0) in vec3 position;
layout(location = 1) in vec3 normal;
layout(location = 2) in vec4 color;
layout(location = 3) in vec2 texcoord;
uniform mat4 modelview;
uniform mat4 projection;
uniform float camscale;
uniform vec3 size;
uniform vec3 scale;
uniform vec3 X3DScale;
uniform int coloringEnabled;
uniform int texturingEnabled;
varying vec3 lightVec;
varying vec3 eyeVec;
varying vec3 normalVec;
out vec4 vColor;
out lowp vec2 uv;
out vec3 vPosition;
void main()
{
    mat4 model = projection * modelview;
    vPosition = X3DScale * camscale * scale * size * position;
	gl_Position = model * vec4(vPosition, 1.0);
    vColor = color;
	normalVec = normalize(normal); 
	vec4 eyePos = gl_ModelViewMatrixInverse * vec4(0., 0., 0., 1.); 
	eyeVec = normalize(eyePos.xyz - position.xyz);
	vec4 lightPos = modelview * vec4(1.0, 0.0, 0.0, 1.0);
	lightVec = normalize(lightPos.xyz - position.xyz);
    uv = texcoord;
}' />
					  
				<ShaderPart type='TESS_CONTROL' url='data:text/plain
#version 420 core 
layout(vertices = 3) out; 
in vec3 vPosition[]; 
out vec3 tcPosition[]; 
uniform float TessLevelInner; 
uniform float TessLevelOuter; 
#define ID gl_InvocationID 
void main() 
{ 
    tcPosition[ID] = vPosition[ID];
    if (ID == 0) {
        gl_TessLevelInner[0] = TessLevelInner; 
        gl_TessLevelOuter[0] = TessLevelOuter; 
        gl_TessLevelOuter[1] = TessLevelOuter; 
        gl_TessLevelOuter[2] = TessLevelOuter; 
    } 
} ' />
				<ShaderPart type='TESS_EVAL' url='data:text/plain
#version 420 core 
layout(triangles, equal_spacing, cw) in; 
in vec3 tcPosition[]; 
out vec3 tePosition; 
out vec3 tePatchDistance; 
uniform mat4 projection; 
uniform mat4 modelview; 
uniform vec3 scale; 
uniform float camscale; 
uniform vec3 size; 
uniform vec3 X3DScale; 
void main() 
{ 
    vec3 p0 = gl_TessCoord.x * tcPosition[0]; 
    vec3 p1 = gl_TessCoord.y * tcPosition[1]; 
    vec3 p2 = gl_TessCoord.z * tcPosition[2]; 
    tePatchDistance = gl_TessCoord; 
    tePosition = X3DScale * camscale * scale * size * normalize(p0 + p1 + p2); 
    gl_Position = projection * modelview * vec4(tePosition, 1); 
} ' />
				<ShaderPart type='GEOMETRY' url='data:text/plain
#version 420 core 
uniform mat4 modelview; 
uniform mat3 normalmatrix; 
layout(triangles) in; 
layout(triangle_strip, max_vertices = 3) out; 
in vec3 tePosition[3]; 
in vec3 tePatchDistance[3]; 
out vec3 gFacetNormal; 
out vec3 gPatchDistance; 
out vec3 gTriDistance; 
out vec2 gFacetTexCoord; 
#define M_PI 3.1415926535897932384626433832795 
void main() 
{ 
    vec3 A = tePosition[2] - tePosition[0]; 
    vec3 B = tePosition[1] - tePosition[0]; 
    gFacetNormal = normalmatrix  * normalize(cross(A, B)); 
    gFacetTexCoord = vec2(asin(gFacetNormal.x)/M_PI + 0.5 , asin(gFacetNormal.y) / M_PI + 0.5 ); // Sphere TexCoord 
    gPatchDistance = tePatchDistance[0]; 
    gTriDistance = vec3(1, 0, 0); 
    gl_Position = gl_in[0].gl_Position; 
    EmitVertex(); 
    gPatchDistance = tePatchDistance[1]; 
    gTriDistance = vec3(0, 1, 0); 
    gl_Position = gl_in[1].gl_Position; 
    EmitVertex(); 
    gPatchDistance = tePatchDistance[2]; 
    gTriDistance = vec3(0, 0, 1); 
    gl_Position = gl_in[2].gl_Position; 
    EmitVertex(); 
    EndPrimitive(); 
} ' />
				<ShaderPart type='FRAGMENT' url='data:text/plain
#version 420 core 
varying vec3 lightVec; 
varying vec3 eyeVec; 
varying vec3 normalVec; 
in vec3 gFacetNormal; 
in vec3 gTriDistance; 
in vec3 gPatchDistance; 
in float gPrimitive; 
in vec2 gFacetTexCoord; 
in vec2 uv; 
in vec4 vColor; 
out vec4 FragColor; 
uniform sampler2D _MainTex; 
uniform vec3 specular = vec3(.7, .7, .7); 
uniform float ambient = 0.2;
uniform vec3 LightPosition; 
uniform vec3 DiffuseMaterial; 
uniform vec3 AmbientMaterial; 
uniform int coloringEnabled; 
uniform int texturingEnabled; 
float amplify(float d, float scale, float offset) 
{ 
    d = scale * d + offset; 
    d = clamp(d, 0, 1); 
    d = 1 - exp2(-2*d*d); 
    return d; 
} 
void main() 
{ 
    vec4 texture_color; 
    if(texturingEnabled == 1) 
    { 
        if(length(uv) == 0) 
        { 
            texture_color = texture2D(_MainTex, gFacetTexCoord); 
        } 
        else 
        { 
            texture_color = texture2D(_MainTex, uv); 
        } 
    } 
    vec3 N = normalize(gFacetNormal); 
    vec3 L = LightPosition; 
    float df = abs(dot(N, L)); 
    vec3 color = AmbientMaterial + df * DiffuseMaterial; 
    float d1 = min(min(gTriDistance.x, gTriDistance.y), gTriDistance.z); 
    float d2 = min(min(gPatchDistance.x, gPatchDistance.y), gPatchDistance.z); 
    color = amplify(d1, 40, -0.5) * amplify(d2, 60, -0.5) * color; 
    vec4 col_accum; 
    col_accum = vec4(color, 1.0) / 2; 
    if(texturingEnabled == 1 &amp;&amp; coloringEnabled == 1) 
    { 
        col_accum = texture_color; 
        col_accum = col_accum + vColor / 2; 
    } 
    else if (coloringEnabled == 1) 
    { 
        col_accum = vColor; 
    } 
    else if (texturingEnabled == 1) 
    { 
        col_accum = col_accum + texture_color / 2; 
    } 
    else 
    { 
        col_accum = vec4(0.0, 0, 0, 1.0); 
    } 
    FragColor = col_accum; 
} ' />
			</ComposedShader>
		</Appearance>
    </Shape>
  </Scene>
</X3D>